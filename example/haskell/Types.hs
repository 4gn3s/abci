{-# LANGUAGE BangPatterns, DeriveDataTypeable, FlexibleInstances, MultiParamTypeClasses #-}
{-# OPTIONS_GHC  -fno-warn-unused-imports #-}
module Types (protoInfo, fileDescriptorProto) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)

protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".types\", haskellPrefix = [], parentModule = [], baseName = MName \"Types\"}, protoFilePath = [\"Types.hs\"], protoSource = \"types/types.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".types.Request\", haskellPrefix = [], parentModule = [MName \"Types\"], baseName = MName \"Request\"}, descFilePath = [\"Types\",\"Request.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".types.Request.type\", haskellPrefix' = [], parentModule' = [MName \"Types\",MName \"Request\"], baseName' = FName \"type'\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".types.MessageType\", haskellPrefix = [], parentModule = [MName \"Types\"], baseName = MName \"MessageType\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".types.Request.data\", haskellPrefix' = [], parentModule' = [MName \"Types\",MName \"Request\"], baseName' = FName \"data'\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".types.Request.key\", haskellPrefix' = [], parentModule' = [MName \"Types\",MName \"Request\"], baseName' = FName \"key\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 26}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".types.Request.value\", haskellPrefix' = [], parentModule' = [MName \"Types\",MName \"Request\"], baseName' = FName \"value\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 34}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], descOneofs = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".types.Response\", haskellPrefix = [], parentModule = [MName \"Types\"], baseName = MName \"Response\"}, descFilePath = [\"Types\",\"Response.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".types.Response.type\", haskellPrefix' = [], parentModule' = [MName \"Types\",MName \"Response\"], baseName' = FName \"type'\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".types.MessageType\", haskellPrefix = [], parentModule = [MName \"Types\"], baseName = MName \"MessageType\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".types.Response.data\", haskellPrefix' = [], parentModule' = [MName \"Types\",MName \"Response\"], baseName' = FName \"data'\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".types.Response.code\", haskellPrefix' = [], parentModule' = [MName \"Types\",MName \"Response\"], baseName' = FName \"code\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 3}, wireTag = WireTag {getWireTag = 24}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".types.CodeType\", haskellPrefix = [], parentModule = [MName \"Types\"], baseName = MName \"CodeType\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".types.Response.error\", haskellPrefix' = [], parentModule' = [MName \"Types\",MName \"Response\"], baseName' = FName \"error\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 4}, wireTag = WireTag {getWireTag = 34}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".types.Response.log\", haskellPrefix' = [], parentModule' = [MName \"Types\",MName \"Response\"], baseName' = FName \"log\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 5}, wireTag = WireTag {getWireTag = 42}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = False, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 9}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], descOneofs = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False}], enums = [EnumInfo {enumName = ProtoName {protobufName = FIName \".types.MessageType\", haskellPrefix = [], parentModule = [MName \"Types\"], baseName = MName \"MessageType\"}, enumFilePath = [\"Types\",\"MessageType.hs\"], enumValues = [(EnumCode {getEnumCode = 0},\"NullMessage\"),(EnumCode {getEnumCode = 1},\"Echo\"),(EnumCode {getEnumCode = 2},\"Flush\"),(EnumCode {getEnumCode = 3},\"Info\"),(EnumCode {getEnumCode = 4},\"SetOption\"),(EnumCode {getEnumCode = 5},\"Exception\"),(EnumCode {getEnumCode = 17},\"AppendTx\"),(EnumCode {getEnumCode = 18},\"CheckTx\"),(EnumCode {getEnumCode = 19},\"GetHash\"),(EnumCode {getEnumCode = 20},\"Query\")]},EnumInfo {enumName = ProtoName {protobufName = FIName \".types.CodeType\", haskellPrefix = [], parentModule = [MName \"Types\"], baseName = MName \"CodeType\"}, enumFilePath = [\"Types\",\"CodeType.hs\"], enumValues = [(EnumCode {getEnumCode = 0},\"OK\"),(EnumCode {getEnumCode = 1},\"InternalError\"),(EnumCode {getEnumCode = 2},\"Unauthorized\"),(EnumCode {getEnumCode = 3},\"InsufficientFees\"),(EnumCode {getEnumCode = 4},\"UnknownRequest\"),(EnumCode {getEnumCode = 5},\"EncodingError\"),(EnumCode {getEnumCode = 6},\"BadNonce\"),(EnumCode {getEnumCode = 7},\"UnknownAccount\"),(EnumCode {getEnumCode = 8},\"InsufficientFunds\")]}], oneofs = [], knownKeyMap = fromList []}"

fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\177\EOT\n\DC1types/types.proto\DC2\ENQtypes\"U\n\aRequest\DC2 \n\EOTtype\CAN\SOH \STX(\SO2\DC2.types.MessageType\DC2\f\n\EOTdata\CAN\STX \SOH(\f\DC2\v\n\ETXkey\CAN\ETX \SOH(\t\DC2\r\n\ENQvalue\CAN\EOT \SOH(\t\"u\n\bResponse\DC2 \n\EOTtype\CAN\SOH \STX(\SO2\DC2.types.MessageType\DC2\f\n\EOTdata\CAN\STX \SOH(\f\DC2\GS\n\EOTcode\CAN\ETX \SOH(\SO2\SI.types.CodeType\DC2\r\n\ENQerror\CAN\EOT \SOH(\t\DC2\v\n\ETXlog\CAN\ENQ \SOH(\t*\142\SOH\n\vMessageType\DC2\SI\n\vNullMessage\DLE\NUL\DC2\b\n\EOTEcho\DLE\SOH\DC2\t\n\ENQFlush\DLE\STX\DC2\b\n\EOTInfo\DLE\ETX\DC2\r\n\tSetOption\DLE\EOT\DC2\r\n\tException\DLE\ENQ\DC2\f\n\bAppendTx\DLE\DC1\DC2\v\n\aCheckTx\DLE\DC2\DC2\v\n\aGetHash\DLE\DC3\DC2\t\n\ENQQuery\DLE\DC4*\173\SOH\n\bCodeType\DC2\ACK\n\STXOK\DLE\NUL\DC2\DC1\n\rInternalError\DLE\SOH\DC2\DLE\n\fUnauthorized\DLE\STX\DC2\DC4\n\DLEInsufficientFees\DLE\ETX\DC2\DC2\n\SOUnknownRequest\DLE\EOT\DC2\DC1\n\rEncodingError\DLE\ENQ\DC2\f\n\bBadNonce\DLE\ACK\DC2\DC2\n\SOUnknownAccount\DLE\a\DC2\NAK\n\DC1InsufficientFunds\DLE\bb\ACKproto3")
